// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/03/b/RAM512.hdl

/**
 * Memory of 512 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    // Put your code here:
    // The MSB contains the address of the RAM64 block to access, the LSB contains the address within the RAM64 block
    DMux8Way (in=load, sel=address[6..8], a=LoadRAM0, b=LoadRAM1, c=LoadRAM2, d=LoadRAM3, e=LoadRAM4, f=LoadRAM5, g=LoadRAM6, h=LoadRAM7);
	RAM64 (in=in, load=LoadRAM0, address=address[0..5], out=RAM0out);
	RAM64 (in=in, load=LoadRAM1, address=address[0..5], out=RAM1out);
	RAM64 (in=in, load=LoadRAM2, address=address[0..5], out=RAM2out);
	RAM64 (in=in, load=LoadRAM3, address=address[0..5], out=RAM3out);
	RAM64 (in=in, load=LoadRAM4, address=address[0..5], out=RAM4out);
	RAM64 (in=in, load=LoadRAM5, address=address[0..5], out=RAM5out);
	RAM64 (in=in, load=LoadRAM6, address=address[0..5], out=RAM6out);
	RAM64 (in=in, load=LoadRAM7, address=address[0..5], out=RAM7out);

	// Read From Address
    Mux8Way16 (a=RAM0out, b=RAM1out, c=RAM2out, d=RAM3out, e=RAM4out, f=RAM5out, g=RAM6out, h=RAM7out, sel=address[6..8], out=out);
}