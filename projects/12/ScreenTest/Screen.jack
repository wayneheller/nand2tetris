// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */

class Screen {

    static boolean color;
    static int screen;
    static Array maskOn;
    static Array maskOff;

    /** Initializes the Screen. */
    function void init() {
        let color = true;
        let screen = 16384;

        let maskOn = Array.new(15);
        let maskOff = Array.new(15);

        let maskOn[0] = 1;
        let maskOn[1] = 2;
        let maskOn[2] = 4;
        let maskOn[3] = 8;
        let maskOn[4] = 16;
        let maskOn[5] = 32;
        let maskOn[6] = 64;
        let maskOn[7] = 128;
        let maskOn[8] = 256;
        let maskOn[9] = 512;
        let maskOn[10] = 1024;
        let maskOn[11] = 2048;
        let maskOn[12] = 4096;
        let maskOn[13] = 8192;
        let maskOn[14] = 16384;
        let maskOn[15] = -32767 - 1;

        

        let maskOff[0] = -1 - 1;
        let maskOff[1] = -1 - 2;
        let maskOff[2] = -1 - 4;
        let maskOff[3] = -1 - 8;
        let maskOff[4] = -1 - 16;
        let maskOff[5] = -1 - 32;
        let maskOff[6] = -1 - 64;
        let maskOff[7] = -1 - 128;
        let maskOff[8] = -1 - 256;
        let maskOff[9] = -1 - 512;
        let maskOff[10] = -1 - 1024;
        let maskOff[11] = -1 - 2048;
        let maskOff[12] = -1 - 4096;
        let maskOff[13] = -1 - 8192;
        let maskOff[14] = -1 - 16384;
        let maskOff[15] = 32767;

        return;
    }

    /** Erases the entire screen.*/
    
    function void clearScreen() {
        var int i;
        let i = 0;
        while(i < 8161) {
            let screen[i] = 0;
            let i = i + 1;
        }
        return;
    }
    

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, mod, b;

        let b = Math.divide(x, 16);
        let address = (32 * y) + b ;
        //do Output.printInt(address); do Output.printString(" ");
        let value = screen[address];
        let mod = x - (16 * b);
        // do Output.printInt(color);
        if (color) {
            let value = value | maskOn[mod];   // sets mod bit to 1
            //do Output.printInt(value);
        }
        else {
            let value = value & maskOff[mod];   // sets mod bit to 0
            
        }

        

        let screen[address] = value;

        return;
    }


    function void drawHline(int x1, int x2, int y) {

        var int x, dx, a;

        if (x1 > x2) {
            let x = x2;
        }

        else {
            let x = x1;
        }

        let a = 0;
        let dx = Math.abs(x2 - x1) + 1;

        while (a < dx) {

            do Screen.drawPixel(x, y);
            let a = a + 1;
            let x = x + 1;
            
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, diff, dx, dy, absDx, absDy, incA, incB, x, y;

        let a = 0;
        let b = 0;
        let diff = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let absDx = Math.abs(dx) + 1;
        let absDy = Math.abs(dy) + 1;
        let x = x1; let y = y1;

        if (dy = 0) {
            do Screen.drawHline(x1, x2, y1);
            return;
        }

        if (dx = 0) {
            do Screen.drawVline(y1, y2, x1);
            return;
        }

        if (dx < 0) {
            let incA = -1;
        }
        else {
            let incA = 1;
        }

        if (dy < 0) {
            let incB = -1;
        }
        else {
            let incB = 1;
        }

        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);

        //do Output.printInt((a < absDx));
        //do Output.printInt((b < absDy));
        //do Output.printInt((b < absDy) & (a < absDx));

        while((a < absDx) & (b < absDy)) {

            //do Output.printInt(x); do Output.printString(" "); do Output.printInt(y); do Output.println();
            //do Screen.drawPixel(x1 + a, y1 + b);
            do Screen.drawPixel(x, y);

            if (diff < 0) { 
                let a = a + 1; let x = x + incA; let diff = diff + dy;
                }

            else { 
                let b = b + 1; let y = y + incB; let diff = diff - dx;
                }

        }

        return;
    }


    function void drawVline(int y1, int y2, int x) {
        var int y, dy, a;

        if (y1 > y2) {
            let y = y2;
        }
        else {
            let y = y1;
        }

        let a = 0;
        let dy = Math.abs(y2 - y1);

        while (a < dy) {

            do Screen.drawPixel(x, y);
            let a = a + 1;
            let y = y + 1;
            
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
       and bottom right corner is (x2,y2), using the current color. */

    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int ystart, yend, y;

        if (y1 > y2) {
            let ystart = y2;
            let yend = y1 + 1;
        }
        else {
            let ystart = y1;
            let yend = y2 + 1;
        }

        let y = ystart;

        while (y < yend) {
            do Screen.drawHline(x1, x2, y);
            let y = y + 1;
        }

        return;
    }
    

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color.*/

    function void drawCircle(int cx, int cy, int r) {

        var int dy, dx, rend, r2;

        let dy = 0;
        let rend = r + 1;
        let r2 = Math.multiply(r,r);

        while (dy < rend ) {

            let dx = Math.sqrt(r2 - Math.multiply(dy,dy));
            do Screen.drawPixel((cx - dx), (cy + dy));
            do Screen.drawPixel((cx + dx), (cy + dy));
            do Screen.drawPixel((cx - dx), (cy - dy));
            do Screen.drawPixel((cx + dx), (cy - dy));
            let dy = dy + 1;
        }

        return;
    }
     


}
